---

#
#
#

apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ .Chart.Name }}"
  labels:
    app: "{{ .Chart.Name }}"
    tier: server
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: "{{ .Chart.Name }}"
  template:
    metadata:
      labels:
        app: "{{ .Chart.Name }}"
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                - key: {{ .Values.affinity.matchExpressionKey }}
                  operator: In
                  values: ["true"]
      strategy:
        type: Recreate
      containers:
        - name: "{{ .Chart.Name }}"
          image: "{{ .Values.image.name }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: APP_ADDRESS
              value: "{{ .Values.env.APP_ADDRESS }}"
            - name: APP_PORT
              value: "{{ .Values.env.APP_PORT }}"
            - name: POSTGRESQL_DATABASE_NAME
              value: "{{ .Values.env.POSTGRESQL_DATABASE_NAME }}"
            - name: POSTGRESQL_DATABASE_USER
              value: "{{ .Values.env.POSTGRESQL_DATABASE_USER }}"
          ports:
            - name: http
              containerPort: 5000
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: http
            initialDelaySeconds: 5
            periodSeconds: 60
            timeoutSeconds: 30
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /
              port: http
            initialDelaySeconds: 5
            periodSeconds: 60
            timeoutSeconds: 30
            successThreshold: 1
            failureThreshold: 3
          resources:
            limits:
              cpu: 200m
              memory: 300Mi
            requests:
              cpu: 100m
              memory: 200Mi
